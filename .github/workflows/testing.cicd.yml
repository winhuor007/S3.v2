name: CI/CD Pipeline for Service

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: yarn install

      - name: Run build
        run: yarn build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./build

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ./build

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Prepare Deployment Directories
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            mkdir -p /home/ubuntu/apps/build
            mkdir -p /home/ubuntu/apps/build/configs

      - name: Copy files to Server using rsync
        run: |
          rsync -avz -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" ./build/ ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }}:/home/ubuntu/apps/build/

      - name: Create .env File
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "NODE_ENV=production" > /home/ubuntu/apps/build/configs/.env.production
            echo "PORT=${{ secrets.PORT }}" >> /home/ubuntu/apps/build/configs/.env.production
            echo "MONGODB_URL=${{ secrets.MONGODB_URL}}" >> /home/ubuntu/apps/build/configs/.env.production

      - name: Install Dependencies and Restart Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Ensure NVM is installed
            if [ ! -f /home/ubuntu/.nvm/nvm.sh ]; then
              echo "NVM not found. Installing NVM..."
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
              export NVM_DIR="/home/ubuntu/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            fi

            # Load NVM
            export NVM_DIR="/home/ubuntu/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            # ------------
            # Ensure Node.js and NPM are installed
            if ! type node > /dev/null 2>&1; then
              echo "Node.js not found. Installing Node.js..."
              nvm install 20
              nvm use 20
              nvm alias default 20
            fi

            # Ensure Yarn and PM2 are installed
            if ! command -v yarn &> /dev/null; then
              echo "Yarn not found. Installing Yarn..."
              npm install -g yarn
            fi

            if ! command -v pm2 &> /dev/null; then
              echo "PM2 not found. Installing PM2..."
              npm install -g pm2
            fi
            # -------------------
            # Navigate to application directory
            cd /home/ubuntu/apps/build

            # Install production dependencies
            yarn install --production


            # Restart or start the application
            if pm2 show product-service > /dev/null; then
              echo "Application is running. Restarting..."
              pm2 restart product-service
            else
              echo "Application is not running. Starting..."
              pm2 start server.js --name product-service
            fi
